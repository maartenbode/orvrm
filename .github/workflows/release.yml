name: Create Release

on:
  workflow_run:
    workflows: ["Rust"]
    types:
      - completed
    branches:
      - main

# Add permissions at the workflow level
permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Add ARM target
        run: rustup target add aarch64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config gcc-aarch64-linux-gnu
          # Install cross-compilation dependencies for OpenSSL
          sudo apt-get install -y crossbuild-essential-arm64 pkg-config-aarch64-linux-gnu

      - name: Build x86_64 Release Binary
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Build ARM Release Binary
        run: |
          # Set up environment variables for cross-compilation with OpenSSL
          PKG_CONFIG_ALLOW_CROSS=1 \
          OPENSSL_DIR=/usr/include/aarch64-linux-gnu \
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc \
          PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig \
          cargo build --release --target aarch64-unknown-linux-gnu

      - name: Get Current Version
        id: get_version
        run: echo "version=$(grep '^version =' Cargo.toml | sed 's/version = \"\(.*\)\"/\1/')" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            target/x86_64-unknown-linux-gnu/release/orvrm
            target/aarch64-unknown-linux-gnu/release/orvrm
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Display Release URL
        run: echo "Release created at ${{ steps.create_release.outputs.url }}"

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Current Version
        id: get_version
        run: echo "version=$(grep '^version =' Cargo.toml | sed 's/version = \"\(.*\)\"/\1/')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/orvrm:latest
            ghcr.io/${{ github.repository_owner }}/orvrm:v${{ steps.get_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=v${{ steps.get_version.outputs.version }}
